若访问不存在的键，则会报错：
>>> info['age']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'age'

在我们不确定字典中是否存在某个键而又想获取其值时，可以使用get方法，还可以设置默认值：
>>> age = info.get('age')
>>> age #'age'键不存在，所以age为None
>>> type(age)
<type 'NoneType'>
>>> age = info.get('age', 18) # 若info中不存在'age'这个键，就返回默认值18
>>> age
18

删除元素：
del
clear()
del info['name']
 info.clear()
 
<1>len()
测量字典中，键值对的个数

<2>keys
返回一个包含字典所有KEY的列表

<3>values
返回一个包含字典所有value的列表

<4>items
返回一个包含所有（键，值）元祖的列表

<5>has_key （Python3 已取消）
dict.has_key(key)如果key在字典中，返回True，否则返回False

字典的遍历：
<1> 遍历字典的key（键）
dict={'name':wangwu, 'age':18}
for key in dict.keys():
  print(keys)
 
<2> 遍历字典的value（值）
dict={'name':wangwu, 'age':18}
for value in dict.values():
  print(value)
  
<3> 遍历字典的项（元素）
for item dict.items
  print(item)
('name', 'wangwu')
('age', 18)

<4> 遍历字典的key-value（键值对）
for key, value in dict.items():
  print('key=%s, value=%s' % (key, value))
  
实现带下标索引的遍历
>>> chars = ['a', 'b', 'c', 'd']
>>> i = 0
>>> for chr in chars:
...     print("%d %s"%(i, chr))
...     i += 1

enumerate()
enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。

>>> chars = ['a', 'b', 'c', 'd']
>>> for i, chr in enumerate(chars):
...     print i, chr
...
0 a
1 b
2 c
3 d
